{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fen13\\\\Documents\\\\Dev\\\\ReactProjects\\\\cv-react\\\\src\\\\components\\\\LanguageItem.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport LanguageItem from './LanguageItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LanguageList() {\n  _s();\n  const [languages, setLanguages] = useState([]);\n  useEffect(() => {\n    // Fetch data for each language\n    const fetchDataForLanguages = async () => {\n      const languageData = [{\n        name: \"HTML5 et CSS3\",\n        logo: \"html_logo_url\",\n        logo2: \"css_logo_url\",\n        linkGithub: \"github_link\"\n      }\n      // Add other languages as needed\n      ];\n      const languagesWithScores = await Promise.all(languageData.map(async language => {\n        const response = await axios.get(`https://www.codewars.com/api/v1/users/Fenriz1349/ranks[${language.name.toLowerCase()}]`);\n        const score = response.data.ranks.languages[language.name.toLowerCase()].score;\n        return {\n          ...language,\n          score\n        };\n      }));\n\n      // Sort languages by score in descending order\n      languagesWithScores.sort((a, b) => b.score - a.score);\n      setLanguages(languagesWithScores);\n    };\n    fetchDataForLanguages();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: languages.map((language, index) => /*#__PURE__*/_jsxDEV(LanguageItem, {\n      logo: language.logo,\n      logo2: language.logo2,\n      name: language.name,\n      linkGithub: language.linkGithub,\n      score: language.score\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(LanguageList, \"GUw6XtH2v7o+bYLHQuF10DihlfQ=\");\n_c = LanguageList;\nexport default LanguageList;\nvar _c;\n$RefreshReg$(_c, \"LanguageList\");","map":{"version":3,"names":["React","useState","useEffect","axios","LanguageItem","jsxDEV","_jsxDEV","LanguageList","_s","languages","setLanguages","fetchDataForLanguages","languageData","name","logo","logo2","linkGithub","languagesWithScores","Promise","all","map","language","response","get","toLowerCase","score","data","ranks","sort","a","b","children","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/fen13/Documents/Dev/ReactProjects/cv-react/src/components/LanguageItem.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport LanguageItem from './LanguageItem';\r\n\r\nfunction LanguageList() {\r\n  const [languages, setLanguages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch data for each language\r\n    const fetchDataForLanguages = async () => {\r\n      const languageData = [\r\n        { name: \"HTML5 et CSS3\", logo: \"html_logo_url\", logo2: \"css_logo_url\", linkGithub: \"github_link\" },\r\n        // Add other languages as needed\r\n      ];\r\n\r\n      const languagesWithScores = await Promise.all(\r\n        languageData.map(async (language) => {\r\n          const response = await axios.get(`https://www.codewars.com/api/v1/users/Fenriz1349/ranks[${language.name.toLowerCase()}]`);\r\n          const score = response.data.ranks.languages[language.name.toLowerCase()].score;\r\n          return { ...language, score };\r\n        })\r\n      );\r\n\r\n      // Sort languages by score in descending order\r\n      languagesWithScores.sort((a, b) => b.score - a.score);\r\n\r\n      setLanguages(languagesWithScores);\r\n    };\r\n\r\n    fetchDataForLanguages();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {languages.map((language, index) => (\r\n        <LanguageItem key={index} logo={language.logo} logo2={language.logo2} name={language.name} linkGithub={language.linkGithub} score={language.score} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LanguageList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACxC,MAAMC,YAAY,GAAG,CACnB;QAAEC,IAAI,EAAE,eAAe;QAAEC,IAAI,EAAE,eAAe;QAAEC,KAAK,EAAE,cAAc;QAAEC,UAAU,EAAE;MAAc;MACjG;MAAA,CACD;MAED,MAAMC,mBAAmB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC3CP,YAAY,CAACQ,GAAG,CAAC,MAAOC,QAAQ,IAAK;QACnC,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,GAAG,CAAE,0DAAyDF,QAAQ,CAACR,IAAI,CAACW,WAAW,CAAC,CAAE,GAAE,CAAC;QAC1H,MAAMC,KAAK,GAAGH,QAAQ,CAACI,IAAI,CAACC,KAAK,CAAClB,SAAS,CAACY,QAAQ,CAACR,IAAI,CAACW,WAAW,CAAC,CAAC,CAAC,CAACC,KAAK;QAC9E,OAAO;UAAE,GAAGJ,QAAQ;UAAEI;QAAM,CAAC;MAC/B,CAAC,CACH,CAAC;;MAED;MACAR,mBAAmB,CAACW,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACL,KAAK,GAAGI,CAAC,CAACJ,KAAK,CAAC;MAErDf,YAAY,CAACO,mBAAmB,CAAC;IACnC,CAAC;IAEDN,qBAAqB,CAAC,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAAyB,QAAA,EACGtB,SAAS,CAACW,GAAG,CAAC,CAACC,QAAQ,EAAEW,KAAK,kBAC7B1B,OAAA,CAACF,YAAY;MAAaU,IAAI,EAAEO,QAAQ,CAACP,IAAK;MAACC,KAAK,EAAEM,QAAQ,CAACN,KAAM;MAACF,IAAI,EAAEQ,QAAQ,CAACR,IAAK;MAACG,UAAU,EAAEK,QAAQ,CAACL,UAAW;MAACS,KAAK,EAAEJ,QAAQ,CAACI;IAAM,GAA/HO,KAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA4H,CACrJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC5B,EAAA,CAnCQD,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AAqCrB,eAAeA,YAAY;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}